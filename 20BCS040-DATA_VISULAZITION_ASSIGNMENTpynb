{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN63wHvKpxd1TWShC2Vj4yy",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Harshvardhan1234/Ambulance-networking-system/blob/master/20BCS040-DATA_VISULAZITION_ASSIGNMENTpynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "metadata": {
        "id": "sEo_mP6ytqxC"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "from sklearn.preprocessing import LabelEncoder"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_excel(\"indian_food_Full Data_Cleansed (1).xlsx\")"
      ],
      "metadata": {
        "id": "wo4Th6fvt28m"
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "oKgVN9gkt75y",
        "outputId": "e7429fb1-8613-42ce-962f-9ecb87e8e82f"
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                        All Ingredients       Course  \\\n",
              "0     Green garlic chutney, fresh green peas, ginger...        snack   \n",
              "1     Whole wheat flour, olive oil, hot water, all p...  main course   \n",
              "2     Moong dal, garam masala powder, garlic, green ...  main course   \n",
              "3        Brinjal, onions, salt, sesame seeds, coriander  main course   \n",
              "4     Wheat flour, baking soda, all purpose flour, b...        snack   \n",
              "...                                                 ...          ...   \n",
              "2289  Milk powder, dry fruits, arrowroot powder, all...      dessert   \n",
              "2290  Cottage cheese, dry dates, dried rose petals, ...      dessert   \n",
              "2291  Cottage cheese, dry dates, dried rose petals, ...      dessert   \n",
              "2292  Cottage cheese, dry dates, dried rose petals, ...      dessert   \n",
              "2293  Cottage cheese, dry dates, dried rose petals, ...      dessert   \n",
              "\n",
              "            Diet Flavor Profile        Ingredients            Name  \\\n",
              "0     vegetarian          spicy         green peas   Lilva Kachori   \n",
              "1     vegetarian             -1  all purpose flour         Chapati   \n",
              "2     vegetarian          spicy  all purpose flour       Daal puri   \n",
              "3     vegetarian             -1            Brinjal  Bengena Pitika   \n",
              "4     vegetarian          spicy  all purpose flour       Namakpara   \n",
              "...          ...            ...                ...             ...   \n",
              "2289  vegetarian          sweet                NaN       Mawa Bati   \n",
              "2290  vegetarian          sweet                NaN          Shufta   \n",
              "2291  vegetarian          sweet                NaN          Shufta   \n",
              "2292  vegetarian          sweet                NaN          Shufta   \n",
              "2293  vegetarian          sweet                NaN          Shufta   \n",
              "\n",
              "          Pivot Field Names      Region            State  Cook Time  Prep Time  \n",
              "0     Ingredients - Split 2        West          Gujarat          6         30  \n",
              "1     Ingredients - Split 4        West      Maharashtra         10         10  \n",
              "2     Ingredients - Split 5        East      West Bengal         30         30  \n",
              "3     Ingredients - Split 1  North East            Assam         30         15  \n",
              "4     Ingredients - Split 3        West          Gujarat         35         10  \n",
              "...                     ...         ...              ...        ...        ...  \n",
              "2289  Ingredients - Split 9     Central   Madhya Pradesh         45         20  \n",
              "2290  Ingredients - Split 6       North  Jammu & Kashmir         30         15  \n",
              "2291  Ingredients - Split 7       North  Jammu & Kashmir         30         15  \n",
              "2292  Ingredients - Split 8       North  Jammu & Kashmir         30         15  \n",
              "2293  Ingredients - Split 9       North  Jammu & Kashmir         30         15  \n",
              "\n",
              "[2294 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bc420561-d3fd-438d-8b0c-c809f0032b9d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>All Ingredients</th>\n",
              "      <th>Course</th>\n",
              "      <th>Diet</th>\n",
              "      <th>Flavor Profile</th>\n",
              "      <th>Ingredients</th>\n",
              "      <th>Name</th>\n",
              "      <th>Pivot Field Names</th>\n",
              "      <th>Region</th>\n",
              "      <th>State</th>\n",
              "      <th>Cook Time</th>\n",
              "      <th>Prep Time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Green garlic chutney, fresh green peas, ginger...</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Whole wheat flour, olive oil, hot water, all p...</td>\n",
              "      <td>main course</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>-1</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>Chapati</td>\n",
              "      <td>Ingredients - Split 4</td>\n",
              "      <td>West</td>\n",
              "      <td>Maharashtra</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Moong dal, garam masala powder, garlic, green ...</td>\n",
              "      <td>main course</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>Daal puri</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>East</td>\n",
              "      <td>West Bengal</td>\n",
              "      <td>30</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Brinjal, onions, salt, sesame seeds, coriander</td>\n",
              "      <td>main course</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>-1</td>\n",
              "      <td>Brinjal</td>\n",
              "      <td>Bengena Pitika</td>\n",
              "      <td>Ingredients - Split 1</td>\n",
              "      <td>North East</td>\n",
              "      <td>Assam</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Wheat flour, baking soda, all purpose flour, b...</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>Namakpara</td>\n",
              "      <td>Ingredients - Split 3</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>35</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2289</th>\n",
              "      <td>Milk powder, dry fruits, arrowroot powder, all...</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Mawa Bati</td>\n",
              "      <td>Ingredients - Split 9</td>\n",
              "      <td>Central</td>\n",
              "      <td>Madhya Pradesh</td>\n",
              "      <td>45</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2290</th>\n",
              "      <td>Cottage cheese, dry dates, dried rose petals, ...</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 6</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2291</th>\n",
              "      <td>Cottage cheese, dry dates, dried rose petals, ...</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 7</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2292</th>\n",
              "      <td>Cottage cheese, dry dates, dried rose petals, ...</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 8</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2293</th>\n",
              "      <td>Cottage cheese, dry dates, dried rose petals, ...</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 9</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2294 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bc420561-d3fd-438d-8b0c-c809f0032b9d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bc420561-d3fd-438d-8b0c-c809f0032b9d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bc420561-d3fd-438d-8b0c-c809f0032b9d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0ef75673-7987-4dd0-a3de-5751d3cf202f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0ef75673-7987-4dd0-a3de-5751d3cf202f')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0ef75673-7987-4dd0-a3de-5751d3cf202f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## choropleth maps"
      ],
      "metadata": {
        "id": "sLT1m113tNFl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "custom_purple_color_scale = [\n",
        "    [0.0, 'rgb(128, 0, 128)'],     # Dark Purple\n",
        "    [0.2, 'rgb(160, 32, 240)'],    # Slightly lighter purple\n",
        "    [0.4, 'rgb(192, 0, 255)'],     # Bright purple\n",
        "    [0.6, 'rgb(200, 100, 255)'],   # Light purple\n",
        "    [0.8, 'rgb(220, 180, 255)'],   # Even lighter purple\n",
        "    [1.0, 'rgb(240, 220, 255)']    # Very light purple\n",
        "]\n",
        "\n",
        "\n",
        "fig = px.choropleth(\n",
        "    df,\n",
        "    geojson=\"https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson\",\n",
        "    featureidkey='properties.ST_NM',\n",
        "    locations='State',\n",
        "    color='Prep Time',\n",
        "    color_continuous_scale=custom_purple_color_scale\n",
        ")\n",
        "\n",
        "\n",
        "# Update geos and display the map\n",
        "fig.update_geos(fitbounds=\"locations\", visible=True)\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "kXXx8emkr2qL",
        "outputId": "3b9ce427-3732-4efe-8b56-ca43f9a03bb1"
      },
      "execution_count": 230,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"ef2d1e33-fa4d-436c-bf19-9c8ae36eaf06\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"ef2d1e33-fa4d-436c-bf19-9c8ae36eaf06\")) {                    Plotly.newPlot(                        \"ef2d1e33-fa4d-436c-bf19-9c8ae36eaf06\",                        [{\"coloraxis\":\"coloraxis\",\"featureidkey\":\"properties.ST_NM\",\"geo\":\"geo\",\"geojson\":\"https:\\u002f\\u002fgist.githubusercontent.com\\u002fjbrobst\\u002f56c13bbbf9d97d187fea01ca62ea5112\\u002fraw\\u002fe388c4cae20aa53cb5090210a42ebb9b765c0a36\\u002findia_states.geojson\",\"hovertemplate\":\"State=%{location}\\u003cbr\\u003ePrep Time=%{z}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"locations\":[\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Goa\",\"Goa\",\"Goa\",\"Goa\",\"Madhya Pradesh\",\"Madhya Pradesh\",\"Madhya Pradesh\",\"Madhya Pradesh\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Telangana\",\"Telangana\",\"Telangana\",\"Telangana\",\"Telangana\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Telangana\",\"Telangana\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Chhattisgarh\",\"Chhattisgarh\",\"Chhattisgarh\",\"Chhattisgarh\",\"Chhattisgarh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Bihar\",\"Bihar\",\"Bihar\",\"Bihar\",\"Bihar\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Nagaland\",\"Nagaland\",\"Nagaland\",\"Nagaland\",\"Nagaland\",\"Nagaland\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Telangana\",\"Telangana\",\"Telangana\",\"Telangana\",\"Telangana\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Manipur\",\"Manipur\",\"Manipur\",\"Manipur\",\"Manipur\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Haryana\",\"Haryana\",\"Haryana\",\"Haryana\",\"Haryana\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Assam\",\"Assam\",\"Assam\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Kerala\",\"Kerala\",\"Kerala\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Manipur\",\"Manipur\",\"Manipur\",\"Manipur\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Goa\",\"Goa\",\"Goa\",\"Goa\",\"Goa\",\"Goa\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Punjab\",\"Punjab\",\"Punjab\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Bihar\",\"Bihar\",\"Bihar\",\"Bihar\",\"Bihar\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Madhya Pradesh\",\"Madhya Pradesh\",\"Madhya Pradesh\",\"Madhya Pradesh\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Uttarakhand\",\"Uttarakhand\",\"Uttarakhand\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Maharashtra\",\"Maharashtra\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Bihar\",\"Bihar\",\"Bihar\",\"Bihar\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"West Bengal\",\"West Bengal\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Maharashtra\",\"Maharashtra\",\"West Bengal\",\"West Bengal\",\"Assam\",\"Assam\",\"Telangana\",\"Telangana\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Gujarat\",\"Gujarat\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Telangana\",\"Telangana\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Odisha\",\"Odisha\",\"Odisha\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Maharashtra\",\"Maharashtra\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Kerala\",\"Kerala\",\"Kerala\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Goa\",\"Goa\",\"Goa\",\"Goa\",\"Goa\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tripura\",\"Tripura\",\"Tripura\",\"Tripura\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Jammu & Kashmir\"],\"name\":\"\",\"ztype\":\"choropleth\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"fitbounds\":\"locations\",\"visible\":true},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Prep Time\"}},\"colorscale\":[[0.0,\"rgb(128, 0, 128)\"],[0.2,\"rgb(160, 32, 240)\"],[0.4,\"rgb(192, 0, 255)\"],[0.6,\"rgb(200, 100, 255)\"],[0.8,\"rgb(220, 180, 255)\"],[1.0,\"rgb(240, 220, 255)\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('ef2d1e33-fa4d-436c-bf19-9c8ae36eaf06');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "MyweFgnUaa94"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## NORMALIZARION"
      ],
      "metadata": {
        "id": "DuQ7bZJv-1Sg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "def normalize_to_1nf(df):\n",
        "\n",
        "  df = df.drop_duplicates()\n",
        "  for col in df.columns:\n",
        "    if pd.api.types.is_string_dtype(df[col]):\n",
        "      df[col] = df[col].str.split(',', expand=True)\n",
        "\n",
        "  return df\n",
        "\n",
        "def normalize_to_2nf(df):\n",
        "  non_key_attrs = [col for col in df.columns if col not in df.index]\n",
        "  non_fully_functionally_dependent_attrs = []\n",
        "  for col in non_key_attrs:\n",
        "    if not df[col].is_unique:\n",
        "      non_fully_functionally_dependent_attrs.append(col)\n",
        "\n",
        "  for col in non_fully_functionally_dependent_attrs:\n",
        "    df.drop(col, axis=1, inplace=True)\n",
        "\n",
        "  return df\n",
        "\n",
        "def find_transitive_dependencies(df):\n",
        "    transitive_dependencies = []\n",
        "    for col1 in df.columns:\n",
        "        for col2 in df.columns:\n",
        "            if col1 != col2:\n",
        "                if df[col1].isin(df[col2]).all():\n",
        "                    transitive_dependencies.append((col1, col2))\n",
        "\n",
        "    return transitive_dependencies\n",
        "\n",
        "def normalize_to_3nf(df):\n",
        "    transitive_dependencies = find_transitive_dependencies(df)\n",
        "\n",
        "    for col1, col2 in transitive_dependencies:\n",
        "        df[col1] = df[col1] - df[col2]\n",
        "\n",
        "    return df"
      ],
      "metadata": {
        "id": "sVuoZTsSaa4P"
      },
      "execution_count": 114,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfx =  pd.concat([df['All Ingredients'].str.split(', ', expand=True), df.drop(\"All Ingredients\", axis = 1)], axis = 1)"
      ],
      "metadata": {
        "id": "1zSlWO1D665h"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_1nf = normalize_to_1nf(dfx.copy())\n",
        "df_1nf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 719
        },
        "id": "kYkoProQ6679",
        "outputId": "fafc5393-ccfe-4424-a93e-0670ee736baa"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         0                    1                  2  \\\n",
              "0     Green garlic chutney     fresh green peas             ginger   \n",
              "1        Whole wheat flour            olive oil          hot water   \n",
              "2                Moong dal  garam masala powder             garlic   \n",
              "3                  Brinjal               onions               salt   \n",
              "4              Wheat flour          baking soda  all purpose flour   \n",
              "...                    ...                  ...                ...   \n",
              "2289           Milk powder           dry fruits   arrowroot powder   \n",
              "2290        Cottage cheese            dry dates  dried rose petals   \n",
              "2291        Cottage cheese            dry dates  dried rose petals   \n",
              "2292        Cottage cheese            dry dates  dried rose petals   \n",
              "2293        Cottage cheese            dry dates  dried rose petals   \n",
              "\n",
              "                      3                  4     5     6     7     8     9  \\\n",
              "0           lemon juice        plain flour  None  None  None  None  None   \n",
              "1     all purpose flour               None  None  None  None  None  None   \n",
              "2          green chilli  all purpose flour  None  None  None  None  None   \n",
              "3          sesame seeds          coriander  None  None  None  None  None   \n",
              "4          black pepper      sunflower oil  None  None  None  None  None   \n",
              "...                 ...                ...   ...   ...   ...   ...   ...   \n",
              "2289  all purpose flour               None  None  None  None  None  None   \n",
              "2290          pistachio              badam  None  None  None  None  None   \n",
              "2291          pistachio              badam  None  None  None  None  None   \n",
              "2292          pistachio              badam  None  None  None  None  None   \n",
              "2293          pistachio              badam  None  None  None  None  None   \n",
              "\n",
              "           Course        Diet Flavor Profile        Ingredients  \\\n",
              "0           snack  vegetarian          spicy         green peas   \n",
              "1     main course  vegetarian            NaN  all purpose flour   \n",
              "2     main course  vegetarian          spicy  all purpose flour   \n",
              "3     main course  vegetarian            NaN            Brinjal   \n",
              "4           snack  vegetarian          spicy  all purpose flour   \n",
              "...           ...         ...            ...                ...   \n",
              "2289      dessert  vegetarian          sweet                NaN   \n",
              "2290      dessert  vegetarian          sweet                NaN   \n",
              "2291      dessert  vegetarian          sweet                NaN   \n",
              "2292      dessert  vegetarian          sweet                NaN   \n",
              "2293      dessert  vegetarian          sweet                NaN   \n",
              "\n",
              "                Name      Pivot Field Names      Region            State  \\\n",
              "0      Lilva Kachori  Ingredients - Split 2        West          Gujarat   \n",
              "1            Chapati  Ingredients - Split 4        West      Maharashtra   \n",
              "2          Daal puri  Ingredients - Split 5        East      West Bengal   \n",
              "3     Bengena Pitika  Ingredients - Split 1  North East            Assam   \n",
              "4          Namakpara  Ingredients - Split 3        West          Gujarat   \n",
              "...              ...                    ...         ...              ...   \n",
              "2289       Mawa Bati  Ingredients - Split 9     Central   Madhya Pradesh   \n",
              "2290          Shufta  Ingredients - Split 6       North  Jammu & Kashmir   \n",
              "2291          Shufta  Ingredients - Split 7       North  Jammu & Kashmir   \n",
              "2292          Shufta  Ingredients - Split 8       North  Jammu & Kashmir   \n",
              "2293          Shufta  Ingredients - Split 9       North  Jammu & Kashmir   \n",
              "\n",
              "      Cook Time  Prep Time  \n",
              "0             6         30  \n",
              "1            10         10  \n",
              "2            30         30  \n",
              "3            30         15  \n",
              "4            35         10  \n",
              "...         ...        ...  \n",
              "2289         45         20  \n",
              "2290         30         15  \n",
              "2291         30         15  \n",
              "2292         30         15  \n",
              "2293         30         15  \n",
              "\n",
              "[2294 rows x 20 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1d3b8ada-e9a3-48a4-bac4-887342249089\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>Course</th>\n",
              "      <th>Diet</th>\n",
              "      <th>Flavor Profile</th>\n",
              "      <th>Ingredients</th>\n",
              "      <th>Name</th>\n",
              "      <th>Pivot Field Names</th>\n",
              "      <th>Region</th>\n",
              "      <th>State</th>\n",
              "      <th>Cook Time</th>\n",
              "      <th>Prep Time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Green garlic chutney</td>\n",
              "      <td>fresh green peas</td>\n",
              "      <td>ginger</td>\n",
              "      <td>lemon juice</td>\n",
              "      <td>plain flour</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Whole wheat flour</td>\n",
              "      <td>olive oil</td>\n",
              "      <td>hot water</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>main course</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>NaN</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>Chapati</td>\n",
              "      <td>Ingredients - Split 4</td>\n",
              "      <td>West</td>\n",
              "      <td>Maharashtra</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Moong dal</td>\n",
              "      <td>garam masala powder</td>\n",
              "      <td>garlic</td>\n",
              "      <td>green chilli</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>main course</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>Daal puri</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>East</td>\n",
              "      <td>West Bengal</td>\n",
              "      <td>30</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Brinjal</td>\n",
              "      <td>onions</td>\n",
              "      <td>salt</td>\n",
              "      <td>sesame seeds</td>\n",
              "      <td>coriander</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>main course</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Brinjal</td>\n",
              "      <td>Bengena Pitika</td>\n",
              "      <td>Ingredients - Split 1</td>\n",
              "      <td>North East</td>\n",
              "      <td>Assam</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Wheat flour</td>\n",
              "      <td>baking soda</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>black pepper</td>\n",
              "      <td>sunflower oil</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>Namakpara</td>\n",
              "      <td>Ingredients - Split 3</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>35</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2289</th>\n",
              "      <td>Milk powder</td>\n",
              "      <td>dry fruits</td>\n",
              "      <td>arrowroot powder</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Mawa Bati</td>\n",
              "      <td>Ingredients - Split 9</td>\n",
              "      <td>Central</td>\n",
              "      <td>Madhya Pradesh</td>\n",
              "      <td>45</td>\n",
              "      <td>20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2290</th>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>badam</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 6</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2291</th>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>badam</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 7</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2292</th>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>badam</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 8</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2293</th>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>badam</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 9</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2294 rows × 20 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d3b8ada-e9a3-48a4-bac4-887342249089')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1d3b8ada-e9a3-48a4-bac4-887342249089 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1d3b8ada-e9a3-48a4-bac4-887342249089');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a2e86960-b0fc-4104-a59d-6241fde1a9d4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a2e86960-b0fc-4104-a59d-6241fde1a9d4')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a2e86960-b0fc-4104-a59d-6241fde1a9d4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_2nf = normalize_to_2nf(df_1nf.reset_index().copy())\n",
        "df_2nf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "SCudobY566-s",
        "outputId": "566e0182-bd03-4f6a-8c01-8bd78dabed8c"
      },
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      index                     0                    1                  2  \\\n",
              "0         0  Green garlic chutney     fresh green peas             ginger   \n",
              "1         1     Whole wheat flour            olive oil          hot water   \n",
              "2         2             Moong dal  garam masala powder             garlic   \n",
              "3         3               Brinjal               onions               salt   \n",
              "4         4           Wheat flour          baking soda  all purpose flour   \n",
              "...     ...                   ...                  ...                ...   \n",
              "2289   2289           Milk powder           dry fruits   arrowroot powder   \n",
              "2290   2290        Cottage cheese            dry dates  dried rose petals   \n",
              "2291   2291        Cottage cheese            dry dates  dried rose petals   \n",
              "2292   2292        Cottage cheese            dry dates  dried rose petals   \n",
              "2293   2293        Cottage cheese            dry dates  dried rose petals   \n",
              "\n",
              "                      3                  4     5     6     7     8     9  \n",
              "0           lemon juice        plain flour  None  None  None  None  None  \n",
              "1     all purpose flour               None  None  None  None  None  None  \n",
              "2          green chilli  all purpose flour  None  None  None  None  None  \n",
              "3          sesame seeds          coriander  None  None  None  None  None  \n",
              "4          black pepper      sunflower oil  None  None  None  None  None  \n",
              "...                 ...                ...   ...   ...   ...   ...   ...  \n",
              "2289  all purpose flour               None  None  None  None  None  None  \n",
              "2290          pistachio              badam  None  None  None  None  None  \n",
              "2291          pistachio              badam  None  None  None  None  None  \n",
              "2292          pistachio              badam  None  None  None  None  None  \n",
              "2293          pistachio              badam  None  None  None  None  None  \n",
              "\n",
              "[2294 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-89b27122-6f3b-4a7c-9034-a5bb25a1538c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Green garlic chutney</td>\n",
              "      <td>fresh green peas</td>\n",
              "      <td>ginger</td>\n",
              "      <td>lemon juice</td>\n",
              "      <td>plain flour</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Whole wheat flour</td>\n",
              "      <td>olive oil</td>\n",
              "      <td>hot water</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Moong dal</td>\n",
              "      <td>garam masala powder</td>\n",
              "      <td>garlic</td>\n",
              "      <td>green chilli</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Brinjal</td>\n",
              "      <td>onions</td>\n",
              "      <td>salt</td>\n",
              "      <td>sesame seeds</td>\n",
              "      <td>coriander</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Wheat flour</td>\n",
              "      <td>baking soda</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>black pepper</td>\n",
              "      <td>sunflower oil</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2289</th>\n",
              "      <td>2289</td>\n",
              "      <td>Milk powder</td>\n",
              "      <td>dry fruits</td>\n",
              "      <td>arrowroot powder</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2290</th>\n",
              "      <td>2290</td>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>badam</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2291</th>\n",
              "      <td>2291</td>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>badam</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2292</th>\n",
              "      <td>2292</td>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>badam</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2293</th>\n",
              "      <td>2293</td>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>badam</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2294 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89b27122-6f3b-4a7c-9034-a5bb25a1538c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-89b27122-6f3b-4a7c-9034-a5bb25a1538c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-89b27122-6f3b-4a7c-9034-a5bb25a1538c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-285e83b7-de8c-4890-88e2-84cd4ac735b0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-285e83b7-de8c-4890-88e2-84cd4ac735b0')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-285e83b7-de8c-4890-88e2-84cd4ac735b0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def find_transitive_dependencies(df):\n",
        "    transitive_dependencies = []\n",
        "    numeric_columns = df.select_dtypes(include=[float, int]).columns\n",
        "    for col1 in numeric_columns:\n",
        "        for col2 in numeric_columns:\n",
        "            if col1 != col2:\n",
        "                if (df[col1].notna() & df[col2].notna()).all():\n",
        "                    transitive_dependencies.append((col1, col2))\n",
        "\n",
        "    return transitive_dependencies\n",
        "\n",
        "def normalize_to_3nf(df):\n",
        "    transitive_dependencies = find_transitive_dependencies(df)\n",
        "\n",
        "    for col1, col2 in transitive_dependencies:\n",
        "        df[col1] = df[col1].fillna(0).astype(float) - df[col2].fillna(0).astype(float)\n",
        "\n",
        "    return df"
      ],
      "metadata": {
        "id": "R4IX3l9XDSxF"
      },
      "execution_count": 149,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "normalized_df = normalize_to_3nf(df_2nf.copy())\n",
        "normalized_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "KesIS6ep67Fl",
        "outputId": "ee073aa7-a66e-4028-a5aa-2e87f6f37305"
      },
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      index                     0                    1                  2  \\\n",
              "0         0  Green garlic chutney     fresh green peas             ginger   \n",
              "1         1     Whole wheat flour            olive oil          hot water   \n",
              "2         2             Moong dal  garam masala powder             garlic   \n",
              "3         3               Brinjal               onions               salt   \n",
              "4         4           Wheat flour          baking soda  all purpose flour   \n",
              "...     ...                   ...                  ...                ...   \n",
              "2289   2289           Milk powder           dry fruits   arrowroot powder   \n",
              "2290   2290        Cottage cheese            dry dates  dried rose petals   \n",
              "2291   2291        Cottage cheese            dry dates  dried rose petals   \n",
              "2292   2292        Cottage cheese            dry dates  dried rose petals   \n",
              "2293   2293        Cottage cheese            dry dates  dried rose petals   \n",
              "\n",
              "                      3                  4     5     6     7     8     9  \n",
              "0           lemon juice        plain flour  None  None  None  None  None  \n",
              "1     all purpose flour               None  None  None  None  None  None  \n",
              "2          green chilli  all purpose flour  None  None  None  None  None  \n",
              "3          sesame seeds          coriander  None  None  None  None  None  \n",
              "4          black pepper      sunflower oil  None  None  None  None  None  \n",
              "...                 ...                ...   ...   ...   ...   ...   ...  \n",
              "2289  all purpose flour               None  None  None  None  None  None  \n",
              "2290          pistachio              badam  None  None  None  None  None  \n",
              "2291          pistachio              badam  None  None  None  None  None  \n",
              "2292          pistachio              badam  None  None  None  None  None  \n",
              "2293          pistachio              badam  None  None  None  None  None  \n",
              "\n",
              "[2294 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-30284912-9490-45e2-8287-916d4872e9f5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Green garlic chutney</td>\n",
              "      <td>fresh green peas</td>\n",
              "      <td>ginger</td>\n",
              "      <td>lemon juice</td>\n",
              "      <td>plain flour</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Whole wheat flour</td>\n",
              "      <td>olive oil</td>\n",
              "      <td>hot water</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>Moong dal</td>\n",
              "      <td>garam masala powder</td>\n",
              "      <td>garlic</td>\n",
              "      <td>green chilli</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>Brinjal</td>\n",
              "      <td>onions</td>\n",
              "      <td>salt</td>\n",
              "      <td>sesame seeds</td>\n",
              "      <td>coriander</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>Wheat flour</td>\n",
              "      <td>baking soda</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>black pepper</td>\n",
              "      <td>sunflower oil</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2289</th>\n",
              "      <td>2289</td>\n",
              "      <td>Milk powder</td>\n",
              "      <td>dry fruits</td>\n",
              "      <td>arrowroot powder</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2290</th>\n",
              "      <td>2290</td>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>badam</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2291</th>\n",
              "      <td>2291</td>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>badam</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2292</th>\n",
              "      <td>2292</td>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>badam</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2293</th>\n",
              "      <td>2293</td>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>badam</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "      <td>None</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2294 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-30284912-9490-45e2-8287-916d4872e9f5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-30284912-9490-45e2-8287-916d4872e9f5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-30284912-9490-45e2-8287-916d4872e9f5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-89e3a0ee-774b-4f77-a71c-45ec204180ff\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-89e3a0ee-774b-4f77-a71c-45ec204180ff')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-89e3a0ee-774b-4f77-a71c-45ec204180ff button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 150
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "QVM2kX6K67Kp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "X30cq29u67NA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_excel(\"/content/indian_food_Full Data_Cleansed (1).xlsx\")"
      ],
      "metadata": {
        "id": "Dp4B-LJNYCoE"
      },
      "execution_count": 224,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop_duplicates(subset='Name', keep='first')\n",
        "df=df.reset_index(drop=True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "Bq7hkBhgYCrx",
        "outputId": "4b8925bc-b792-4e39-d231-127bcc86e65d"
      },
      "execution_count": 225,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                       All Ingredients       Course  \\\n",
              "0    Green garlic chutney, fresh green peas, ginger...        snack   \n",
              "1    Whole wheat flour, olive oil, hot water, all p...  main course   \n",
              "2    Moong dal, garam masala powder, garlic, green ...  main course   \n",
              "3       Brinjal, onions, salt, sesame seeds, coriander  main course   \n",
              "4    Wheat flour, baking soda, all purpose flour, b...        snack   \n",
              "..                                                 ...          ...   \n",
              "250  Brown rice, fennel seeds, grated coconut, blac...      dessert   \n",
              "251       Chana dal, urad dal, beans, coconut, mustard  main course   \n",
              "252   Boiled pork, onions, chillies, ginger and garlic  main course   \n",
              "253  Urad dal, ginger, curry leaves, green chilies,...        snack   \n",
              "254  Cottage cheese, dry dates, dried rose petals, ...      dessert   \n",
              "\n",
              "               Diet Flavor Profile        Ingredients            Name  \\\n",
              "0        vegetarian          spicy         green peas   Lilva Kachori   \n",
              "1        vegetarian             -1  all purpose flour         Chapati   \n",
              "2        vegetarian          spicy  all purpose flour       Daal puri   \n",
              "3        vegetarian             -1            Brinjal  Bengena Pitika   \n",
              "4        vegetarian          spicy  all purpose flour       Namakpara   \n",
              "..              ...            ...                ...             ...   \n",
              "250      vegetarian          sweet       black pepper          Pinaca   \n",
              "251      vegetarian          spicy              beans         Poriyal   \n",
              "252  non vegetarian          spicy        Boiled pork     Pork Bharta   \n",
              "253      vegetarian          spicy       black pepper            Vada   \n",
              "254      vegetarian          sweet              badam          Shufta   \n",
              "\n",
              "         Pivot Field Names      Region            State  Cook Time  Prep Time  \n",
              "0    Ingredients - Split 2        West          Gujarat          6         30  \n",
              "1    Ingredients - Split 4        West      Maharashtra         10         10  \n",
              "2    Ingredients - Split 5        East      West Bengal         30         30  \n",
              "3    Ingredients - Split 1  North East            Assam         30         15  \n",
              "4    Ingredients - Split 3        West          Gujarat         35         10  \n",
              "..                     ...         ...              ...        ...        ...  \n",
              "250  Ingredients - Split 4        West              Goa         23         15  \n",
              "251  Ingredients - Split 3       South       Tamil Nadu         30         15  \n",
              "252  Ingredients - Split 1  North East          Tripura         40         15  \n",
              "253  Ingredients - Split 5       South       Tamil Nadu         20         15  \n",
              "254  Ingredients - Split 5       North  Jammu & Kashmir         30         15  \n",
              "\n",
              "[255 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9df6e30a-b194-4daa-a5cf-975ae4864e31\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>All Ingredients</th>\n",
              "      <th>Course</th>\n",
              "      <th>Diet</th>\n",
              "      <th>Flavor Profile</th>\n",
              "      <th>Ingredients</th>\n",
              "      <th>Name</th>\n",
              "      <th>Pivot Field Names</th>\n",
              "      <th>Region</th>\n",
              "      <th>State</th>\n",
              "      <th>Cook Time</th>\n",
              "      <th>Prep Time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Green garlic chutney, fresh green peas, ginger...</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Whole wheat flour, olive oil, hot water, all p...</td>\n",
              "      <td>main course</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>-1</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>Chapati</td>\n",
              "      <td>Ingredients - Split 4</td>\n",
              "      <td>West</td>\n",
              "      <td>Maharashtra</td>\n",
              "      <td>10</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Moong dal, garam masala powder, garlic, green ...</td>\n",
              "      <td>main course</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>Daal puri</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>East</td>\n",
              "      <td>West Bengal</td>\n",
              "      <td>30</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Brinjal, onions, salt, sesame seeds, coriander</td>\n",
              "      <td>main course</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>-1</td>\n",
              "      <td>Brinjal</td>\n",
              "      <td>Bengena Pitika</td>\n",
              "      <td>Ingredients - Split 1</td>\n",
              "      <td>North East</td>\n",
              "      <td>Assam</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Wheat flour, baking soda, all purpose flour, b...</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>all purpose flour</td>\n",
              "      <td>Namakpara</td>\n",
              "      <td>Ingredients - Split 3</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>35</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>250</th>\n",
              "      <td>Brown rice, fennel seeds, grated coconut, blac...</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>black pepper</td>\n",
              "      <td>Pinaca</td>\n",
              "      <td>Ingredients - Split 4</td>\n",
              "      <td>West</td>\n",
              "      <td>Goa</td>\n",
              "      <td>23</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>251</th>\n",
              "      <td>Chana dal, urad dal, beans, coconut, mustard</td>\n",
              "      <td>main course</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>beans</td>\n",
              "      <td>Poriyal</td>\n",
              "      <td>Ingredients - Split 3</td>\n",
              "      <td>South</td>\n",
              "      <td>Tamil Nadu</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>252</th>\n",
              "      <td>Boiled pork, onions, chillies, ginger and garlic</td>\n",
              "      <td>main course</td>\n",
              "      <td>non vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>Boiled pork</td>\n",
              "      <td>Pork Bharta</td>\n",
              "      <td>Ingredients - Split 1</td>\n",
              "      <td>North East</td>\n",
              "      <td>Tripura</td>\n",
              "      <td>40</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>253</th>\n",
              "      <td>Urad dal, ginger, curry leaves, green chilies,...</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>black pepper</td>\n",
              "      <td>Vada</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>South</td>\n",
              "      <td>Tamil Nadu</td>\n",
              "      <td>20</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>254</th>\n",
              "      <td>Cottage cheese, dry dates, dried rose petals, ...</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>255 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9df6e30a-b194-4daa-a5cf-975ae4864e31')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9df6e30a-b194-4daa-a5cf-975ae4864e31 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9df6e30a-b194-4daa-a5cf-975ae4864e31');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-68d5ac18-a0ca-4a9d-a680-7a806d85abf8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-68d5ac18-a0ca-4a9d-a680-7a806d85abf8')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-68d5ac18-a0ca-4a9d-a680-7a806d85abf8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 225
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['All Ingredients'] = df['All Ingredients'].str.split(',')\n",
        "df = df.explode('All Ingredients')\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "F2RdhggdYCys",
        "outputId": "01ec9dd0-0493-40bb-c46d-81a15339bb0f"
      },
      "execution_count": 226,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          All Ingredients   Course        Diet Flavor Profile Ingredients  \\\n",
              "0    Green garlic chutney    snack  vegetarian          spicy  green peas   \n",
              "0        fresh green peas    snack  vegetarian          spicy  green peas   \n",
              "0                  ginger    snack  vegetarian          spicy  green peas   \n",
              "0             lemon juice    snack  vegetarian          spicy  green peas   \n",
              "0             plain flour    snack  vegetarian          spicy  green peas   \n",
              "..                    ...      ...         ...            ...         ...   \n",
              "254        Cottage cheese  dessert  vegetarian          sweet       badam   \n",
              "254             dry dates  dessert  vegetarian          sweet       badam   \n",
              "254     dried rose petals  dessert  vegetarian          sweet       badam   \n",
              "254             pistachio  dessert  vegetarian          sweet       badam   \n",
              "254                 badam  dessert  vegetarian          sweet       badam   \n",
              "\n",
              "              Name      Pivot Field Names Region            State  Cook Time  \\\n",
              "0    Lilva Kachori  Ingredients - Split 2   West          Gujarat          6   \n",
              "0    Lilva Kachori  Ingredients - Split 2   West          Gujarat          6   \n",
              "0    Lilva Kachori  Ingredients - Split 2   West          Gujarat          6   \n",
              "0    Lilva Kachori  Ingredients - Split 2   West          Gujarat          6   \n",
              "0    Lilva Kachori  Ingredients - Split 2   West          Gujarat          6   \n",
              "..             ...                    ...    ...              ...        ...   \n",
              "254         Shufta  Ingredients - Split 5  North  Jammu & Kashmir         30   \n",
              "254         Shufta  Ingredients - Split 5  North  Jammu & Kashmir         30   \n",
              "254         Shufta  Ingredients - Split 5  North  Jammu & Kashmir         30   \n",
              "254         Shufta  Ingredients - Split 5  North  Jammu & Kashmir         30   \n",
              "254         Shufta  Ingredients - Split 5  North  Jammu & Kashmir         30   \n",
              "\n",
              "     Prep Time  \n",
              "0           30  \n",
              "0           30  \n",
              "0           30  \n",
              "0           30  \n",
              "0           30  \n",
              "..         ...  \n",
              "254         15  \n",
              "254         15  \n",
              "254         15  \n",
              "254         15  \n",
              "254         15  \n",
              "\n",
              "[1136 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-927c35ba-1127-408a-969d-d79b306507a8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>All Ingredients</th>\n",
              "      <th>Course</th>\n",
              "      <th>Diet</th>\n",
              "      <th>Flavor Profile</th>\n",
              "      <th>Ingredients</th>\n",
              "      <th>Name</th>\n",
              "      <th>Pivot Field Names</th>\n",
              "      <th>Region</th>\n",
              "      <th>State</th>\n",
              "      <th>Cook Time</th>\n",
              "      <th>Prep Time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Green garlic chutney</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>fresh green peas</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ginger</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>lemon juice</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>plain flour</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>254</th>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>254</th>\n",
              "      <td>dry dates</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>254</th>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>254</th>\n",
              "      <td>pistachio</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>254</th>\n",
              "      <td>badam</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1136 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-927c35ba-1127-408a-969d-d79b306507a8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-927c35ba-1127-408a-969d-d79b306507a8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-927c35ba-1127-408a-969d-d79b306507a8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7f724e0b-91af-429a-8bf1-0faaac0578ea\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7f724e0b-91af-429a-8bf1-0faaac0578ea')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7f724e0b-91af-429a-8bf1-0faaac0578ea button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 226
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"Region\"].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PnGLq2lsYC1e",
        "outputId": "4f7eea8b-6122-4007-edb4-a928b294dcc1"
      },
      "execution_count": 250,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "West          340\n",
              "South         275\n",
              "North         269\n",
              "East          122\n",
              "North East    112\n",
              "Central        18\n",
              "Name: Region, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 250
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "WT1XVk74YC3V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "fkjQi2PNYC52"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "custom_purple_color_scale = [\n",
        "    [0.0, 'rgb(128, 0, 128)'],     # Dark Purple\n",
        "    [0.2, 'rgb(160, 32, 240)'],    # Slightly lighter purple\n",
        "    [0.4, 'rgb(192, 0, 255)'],     # Bright purple\n",
        "    [0.6, 'rgb(200, 100, 255)'],   # Light purple\n",
        "    [0.8, 'rgb(220, 180, 255)'],   # Even lighter purple\n",
        "    [1.0, 'rgb(240, 220, 255)']    # Very light purple\n",
        "]\n",
        "\n",
        "\n",
        "fig = px.choropleth(\n",
        "    df,\n",
        "    geojson=\"https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson\",\n",
        "    featureidkey='properties.ST_NM',\n",
        "    locations='State',\n",
        "    color='Cook Time',\n",
        "    color_continuous_scale=custom_purple_color_scale\n",
        ")\n",
        "\n",
        "\n",
        "# Update geos and display the map\n",
        "fig.update_geos(fitbounds=\"locations\", visible=True)\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        },
        "id": "mabhbw1tYC8j",
        "outputId": "b5ecdd29-824c-46c5-abc7-b0fc022d0fae"
      },
      "execution_count": 231,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"e0635dd1-d308-4c38-8f6c-0b94d878003d\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"e0635dd1-d308-4c38-8f6c-0b94d878003d\")) {                    Plotly.newPlot(                        \"e0635dd1-d308-4c38-8f6c-0b94d878003d\",                        [{\"coloraxis\":\"coloraxis\",\"featureidkey\":\"properties.ST_NM\",\"geo\":\"geo\",\"geojson\":\"https:\\u002f\\u002fgist.githubusercontent.com\\u002fjbrobst\\u002f56c13bbbf9d97d187fea01ca62ea5112\\u002fraw\\u002fe388c4cae20aa53cb5090210a42ebb9b765c0a36\\u002findia_states.geojson\",\"hovertemplate\":\"State=%{location}\\u003cbr\\u003eCook Time=%{z}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"locations\":[\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Goa\",\"Goa\",\"Goa\",\"Goa\",\"Madhya Pradesh\",\"Madhya Pradesh\",\"Madhya Pradesh\",\"Madhya Pradesh\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Telangana\",\"Telangana\",\"Telangana\",\"Telangana\",\"Telangana\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Telangana\",\"Telangana\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Chhattisgarh\",\"Chhattisgarh\",\"Chhattisgarh\",\"Chhattisgarh\",\"Chhattisgarh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Bihar\",\"Bihar\",\"Bihar\",\"Bihar\",\"Bihar\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Nagaland\",\"Nagaland\",\"Nagaland\",\"Nagaland\",\"Nagaland\",\"Nagaland\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Telangana\",\"Telangana\",\"Telangana\",\"Telangana\",\"Telangana\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Manipur\",\"Manipur\",\"Manipur\",\"Manipur\",\"Manipur\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Haryana\",\"Haryana\",\"Haryana\",\"Haryana\",\"Haryana\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Assam\",\"Assam\",\"Assam\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Kerala\",\"Kerala\",\"Kerala\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Manipur\",\"Manipur\",\"Manipur\",\"Manipur\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Goa\",\"Goa\",\"Goa\",\"Goa\",\"Goa\",\"Goa\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Punjab\",\"Punjab\",\"Punjab\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Bihar\",\"Bihar\",\"Bihar\",\"Bihar\",\"Bihar\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Madhya Pradesh\",\"Madhya Pradesh\",\"Madhya Pradesh\",\"Madhya Pradesh\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Uttarakhand\",\"Uttarakhand\",\"Uttarakhand\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Maharashtra\",\"Maharashtra\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Bihar\",\"Bihar\",\"Bihar\",\"Bihar\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Rajasthan\",\"Rajasthan\",\"Rajasthan\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"West Bengal\",\"West Bengal\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Maharashtra\",\"Maharashtra\",\"West Bengal\",\"West Bengal\",\"Assam\",\"Assam\",\"Telangana\",\"Telangana\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Gujarat\",\"Gujarat\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"NCT of Delhi\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Telangana\",\"Telangana\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Odisha\",\"Odisha\",\"Odisha\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"West Bengal\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Maharashtra\",\"Maharashtra\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Andhra Pradesh\",\"Andhra Pradesh\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Uttar Pradesh\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Karnataka\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Punjab\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Maharashtra\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Kerala\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Gujarat\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Odisha\",\"Odisha\",\"Odisha\",\"Odisha\",\"Kerala\",\"Kerala\",\"Kerala\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Assam\",\"Goa\",\"Goa\",\"Goa\",\"Goa\",\"Goa\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tripura\",\"Tripura\",\"Tripura\",\"Tripura\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Tamil Nadu\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Jammu & Kashmir\",\"Jammu & Kashmir\"],\"name\":\"\",\"z\":[6,6,6,6,6,10,10,10,10,30,30,30,30,30,30,30,30,30,30,35,35,35,35,35,60,60,60,60,60,60,60,60,45,45,45,45,30,30,30,30,30,30,30,30,30,30,90,90,90,90,90,30,30,30,30,30,30,30,30,30,30,10,10,10,10,10,30,30,30,30,30,30,30,30,30,30,30,30,30,30,40,40,40,40,40,50,50,50,50,50,20,20,30,30,30,30,30,40,40,40,40,40,60,60,60,60,60,25,25,25,25,25,20,20,20,20,20,45,45,45,45,45,20,20,20,20,20,20,20,20,20,20,30,30,30,30,30,30,30,30,30,30,30,30,15,15,15,15,15,15,30,30,30,30,30,50,50,50,50,50,60,60,60,60,60,45,45,45,45,45,40,40,40,40,40,40,40,40,50,50,50,50,50,50,50,50,50,20,20,20,20,20,20,20,20,20,20,15,15,15,15,15,10,10,10,10,40,40,40,40,40,20,20,20,20,20,20,20,20,20,120,120,120,120,120,30,30,30,30,30,20,20,20,20,20,40,40,40,40,40,15,15,15,15,15,20,20,20,20,20,30,30,30,30,30,30,30,30,30,30,60,60,60,60,60,60,30,30,30,30,30,40,40,40,40,40,30,30,30,30,30,40,40,40,30,30,30,30,30,25,25,25,35,35,35,35,35,35,35,60,60,60,60,60,20,20,20,20,20,30,30,30,20,20,20,20,20,20,20,20,30,30,30,30,30,30,30,30,30,30,20,20,5,5,5,45,45,45,45,60,60,60,30,30,30,30,30,30,30,40,40,40,40,40,30,30,30,30,30,30,30,30,30,30,20,20,20,20,20,30,30,30,30,30,40,40,40,35,35,35,35,35,35,30,30,30,30,40,40,40,40,40,40,40,40,40,40,45,45,45,45,20,20,20,20,20,30,30,30,30,30,30,30,30,30,30,60,60,60,60,60,60,60,60,60,60,90,90,90,20,20,20,20,60,60,60,60,60,60,60,720,720,720,720,45,45,45,45,60,60,60,60,60,60,10,10,10,10,35,35,35,35,35,35,90,90,90,90,90,20,20,20,20,40,40,40,20,20,20,20,20,30,30,30,30,30,60,60,45,45,45,45,45,20,20,20,20,20,30,30,30,30,30,20,20,20,20,20,30,30,30,30,30,30,30,45,45,50,50,50,60,60,60,45,45,45,45,45,45,45,60,60,60,45,45,45,45,45,40,40,40,40,40,40,35,35,35,35,35,30,30,30,30,30,30,30,30,30,30,30,30,60,60,60,60,60,60,60,60,60,60,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,120,120,120,120,120,30,30,30,30,30,40,40,40,40,20,20,20,20,20,20,20,20,20,20,15,15,15,15,15,15,20,20,20,20,20,20,20,20,20,20,30,30,30,30,30,60,60,60,60,60,60,30,30,30,30,30,40,40,40,40,40,20,20,20,20,20,20,20,20,20,40,40,40,40,40,50,50,50,50,50,45,45,45,45,20,20,20,20,20,30,30,30,60,60,60,40,40,40,40,40,30,30,30,40,40,40,40,40,50,50,20,20,20,20,20,90,90,90,90,90,20,20,20,20,20,20,30,30,30,30,30,45,45,45,45,45,40,40,40,40,40,60,60,60,60,60,60,60,60,60,30,30,30,30,30,25,25,25,25,25,50,50,50,50,50,45,45,45,45,45,20,20,20,20,120,120,120,120,20,20,20,20,20,30,30,30,30,30,20,20,20,20,20,20,20,20,25,25,25,25,25,30,30,30,50,50,50,50,50,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,40,40,40,40,40,25,25,25,25,25,30,30,30,30,30,25,25,25,30,30,30,25,25,25,25,75,75,75,30,30,30,30,30,60,60,60,35,35,35,35,55,55,55,40,40,40,40,30,30,30,30,25,25,25,25,25,30,30,30,90,90,90,90,10,10,10,10,10,30,30,30,30,30,20,20,20,20,20,20,20,10,10,10,30,30,20,20,50,50,50,30,30,30,30,25,25,50,50,30,30,30,30,30,30,25,25,25,25,10,10,25,25,25,25,25,60,60,60,5,5,5,5,25,25,20,20,35,35,35,30,30,30,30,30,20,20,20,30,30,30,30,30,40,40,40,30,30,30,30,30,40,40,40,40,40,40,40,40,40,30,30,30,30,30,20,20,20,20,20,35,35,30,30,30,30,30,25,25,90,90,90,90,90,30,30,30,30,30,30,30,30,30,30,30,30,30,25,25,25,25,25,30,30,30,30,30,30,2,2,2,2,2,5,5,5,5,30,30,30,30,30,90,90,90,90,90,35,35,35,35,35,30,30,30,30,30,45,45,45,45,45,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,20,20,20,20,20,20,20,20,20,20,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,23,23,23,23,23,30,30,30,30,30,40,40,40,40,20,20,20,20,20,30,30,30,30,30],\"type\":\"choropleth\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"geo\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{},\"fitbounds\":\"locations\",\"visible\":true},\"coloraxis\":{\"colorbar\":{\"title\":{\"text\":\"Cook Time\"}},\"colorscale\":[[0.0,\"rgb(128, 0, 128)\"],[0.2,\"rgb(160, 32, 240)\"],[0.4,\"rgb(192, 0, 255)\"],[0.6,\"rgb(200, 100, 255)\"],[0.8,\"rgb(220, 180, 255)\"],[1.0,\"rgb(240, 220, 255)\"]]},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('e0635dd1-d308-4c38-8f6c-0b94d878003d');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "A4oj5-DZYDA0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "uF3BeGdOYDDV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"test.csv\")"
      ],
      "metadata": {
        "id": "38twB-X8YDGC"
      },
      "execution_count": 270,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop(\"Unnamed: 0\",axis = 1)"
      ],
      "metadata": {
        "id": "gwiaNuZ8hJPz"
      },
      "execution_count": 272,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df[df[\"Flavor Profile\"]!=-1]"
      ],
      "metadata": {
        "id": "NCI4W3XgYDOK"
      },
      "execution_count": 273,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "W9tx0YgmYDTg",
        "outputId": "47cb5941-fec1-4901-bd5c-0a3385840059"
      },
      "execution_count": 274,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           All Ingredients   Course        Diet Flavor Profile Ingredients  \\\n",
              "0     Green garlic chutney    snack  vegetarian          spicy  green peas   \n",
              "1         fresh green peas    snack  vegetarian          spicy  green peas   \n",
              "2                   ginger    snack  vegetarian          spicy  green peas   \n",
              "3              lemon juice    snack  vegetarian          spicy  green peas   \n",
              "4              plain flour    snack  vegetarian          spicy  green peas   \n",
              "...                    ...      ...         ...            ...         ...   \n",
              "1131        Cottage cheese  dessert  vegetarian          sweet       badam   \n",
              "1132             dry dates  dessert  vegetarian          sweet       badam   \n",
              "1133     dried rose petals  dessert  vegetarian          sweet       badam   \n",
              "1134             pistachio  dessert  vegetarian          sweet       badam   \n",
              "1135                 badam  dessert  vegetarian          sweet       badam   \n",
              "\n",
              "               Name      Pivot Field Names Region            State  Cook Time  \\\n",
              "0     Lilva Kachori  Ingredients - Split 2   West          Gujarat          6   \n",
              "1     Lilva Kachori  Ingredients - Split 2   West          Gujarat          6   \n",
              "2     Lilva Kachori  Ingredients - Split 2   West          Gujarat          6   \n",
              "3     Lilva Kachori  Ingredients - Split 2   West          Gujarat          6   \n",
              "4     Lilva Kachori  Ingredients - Split 2   West          Gujarat          6   \n",
              "...             ...                    ...    ...              ...        ...   \n",
              "1131         Shufta  Ingredients - Split 5  North  Jammu & Kashmir         30   \n",
              "1132         Shufta  Ingredients - Split 5  North  Jammu & Kashmir         30   \n",
              "1133         Shufta  Ingredients - Split 5  North  Jammu & Kashmir         30   \n",
              "1134         Shufta  Ingredients - Split 5  North  Jammu & Kashmir         30   \n",
              "1135         Shufta  Ingredients - Split 5  North  Jammu & Kashmir         30   \n",
              "\n",
              "      Prep Time  \n",
              "0            30  \n",
              "1            30  \n",
              "2            30  \n",
              "3            30  \n",
              "4            30  \n",
              "...         ...  \n",
              "1131         15  \n",
              "1132         15  \n",
              "1133         15  \n",
              "1134         15  \n",
              "1135         15  \n",
              "\n",
              "[1136 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-95339635-b3b3-4c02-96f3-2dff8dd755ef\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>All Ingredients</th>\n",
              "      <th>Course</th>\n",
              "      <th>Diet</th>\n",
              "      <th>Flavor Profile</th>\n",
              "      <th>Ingredients</th>\n",
              "      <th>Name</th>\n",
              "      <th>Pivot Field Names</th>\n",
              "      <th>Region</th>\n",
              "      <th>State</th>\n",
              "      <th>Cook Time</th>\n",
              "      <th>Prep Time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Green garlic chutney</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>fresh green peas</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ginger</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>lemon juice</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>plain flour</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1131</th>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1132</th>\n",
              "      <td>dry dates</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1133</th>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1134</th>\n",
              "      <td>pistachio</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1135</th>\n",
              "      <td>badam</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1136 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95339635-b3b3-4c02-96f3-2dff8dd755ef')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-95339635-b3b3-4c02-96f3-2dff8dd755ef button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-95339635-b3b3-4c02-96f3-2dff8dd755ef');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9ad96e43-ec48-42eb-bef9-4058e377f893\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9ad96e43-ec48-42eb-bef9-4058e377f893')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9ad96e43-ec48-42eb-bef9-4058e377f893 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 274
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import MinMaxScaler"
      ],
      "metadata": {
        "id": "WphJIPltolkt"
      },
      "execution_count": 320,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = MinMaxScaler()\n",
        "\n",
        "df[['Cook_Timex',\t'Prep_Timex']] = scaler.fit_transform(df[['Cook Time',\t'Prep Time']])\n"
      ],
      "metadata": {
        "id": "c7YhovNpo3cN"
      },
      "execution_count": 321,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[['Cook_Timex',\t'Prep_Timex']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "R2Ykao_-pDzy",
        "outputId": "80ae84ff-f46d-4dcd-e38d-54a4dedad057"
      },
      "execution_count": 324,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Cook_Timex  Prep_Timex\n",
              "0       0.005571    0.061876\n",
              "1       0.005571    0.061876\n",
              "2       0.005571    0.061876\n",
              "3       0.005571    0.061876\n",
              "4       0.005571    0.061876\n",
              "...          ...         ...\n",
              "1131    0.038997    0.031936\n",
              "1132    0.038997    0.031936\n",
              "1133    0.038997    0.031936\n",
              "1134    0.038997    0.031936\n",
              "1135    0.038997    0.031936\n",
              "\n",
              "[1136 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-05e85407-18a6-46c1-acf2-b64212191c19\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Cook_Timex</th>\n",
              "      <th>Prep_Timex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.005571</td>\n",
              "      <td>0.061876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.005571</td>\n",
              "      <td>0.061876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.005571</td>\n",
              "      <td>0.061876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.005571</td>\n",
              "      <td>0.061876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.005571</td>\n",
              "      <td>0.061876</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1131</th>\n",
              "      <td>0.038997</td>\n",
              "      <td>0.031936</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1132</th>\n",
              "      <td>0.038997</td>\n",
              "      <td>0.031936</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1133</th>\n",
              "      <td>0.038997</td>\n",
              "      <td>0.031936</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1134</th>\n",
              "      <td>0.038997</td>\n",
              "      <td>0.031936</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1135</th>\n",
              "      <td>0.038997</td>\n",
              "      <td>0.031936</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1136 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-05e85407-18a6-46c1-acf2-b64212191c19')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-05e85407-18a6-46c1-acf2-b64212191c19 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-05e85407-18a6-46c1-acf2-b64212191c19');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fdc1a026-3a38-486c-b50d-008e13368449\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fdc1a026-3a38-486c-b50d-008e13368449')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fdc1a026-3a38-486c-b50d-008e13368449 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 324
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler"
      ],
      "metadata": {
        "id": "lRYXY4DtpEaQ"
      },
      "execution_count": 327,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()\n",
        "df[['Cook_Timex',\t'Prep_Timex']] = scaler.fit_transform(df[['Cook Time',\t'Prep Time']])\n"
      ],
      "metadata": {
        "id": "Lh_oJqH4plFW"
      },
      "execution_count": 328,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[['Cook_Timex',\t'Prep_Timex']]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "InjdlPIDppLo",
        "outputId": "0955635e-2483-4bbe-d30d-dd45253f71bd"
      },
      "execution_count": 329,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Cook_Timex  Prep_Timex\n",
              "0      -0.714211   -0.019188\n",
              "1      -0.714211   -0.019188\n",
              "2      -0.714211   -0.019188\n",
              "3      -0.714211   -0.019188\n",
              "4      -0.714211   -0.019188\n",
              "...          ...         ...\n",
              "1131   -0.175619   -0.239805\n",
              "1132   -0.175619   -0.239805\n",
              "1133   -0.175619   -0.239805\n",
              "1134   -0.175619   -0.239805\n",
              "1135   -0.175619   -0.239805\n",
              "\n",
              "[1136 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a10d12fe-8f25-47bf-a8dd-0ef34960c3f3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Cook_Timex</th>\n",
              "      <th>Prep_Timex</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.714211</td>\n",
              "      <td>-0.019188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.714211</td>\n",
              "      <td>-0.019188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.714211</td>\n",
              "      <td>-0.019188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.714211</td>\n",
              "      <td>-0.019188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.714211</td>\n",
              "      <td>-0.019188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1131</th>\n",
              "      <td>-0.175619</td>\n",
              "      <td>-0.239805</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1132</th>\n",
              "      <td>-0.175619</td>\n",
              "      <td>-0.239805</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1133</th>\n",
              "      <td>-0.175619</td>\n",
              "      <td>-0.239805</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1134</th>\n",
              "      <td>-0.175619</td>\n",
              "      <td>-0.239805</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1135</th>\n",
              "      <td>-0.175619</td>\n",
              "      <td>-0.239805</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1136 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a10d12fe-8f25-47bf-a8dd-0ef34960c3f3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a10d12fe-8f25-47bf-a8dd-0ef34960c3f3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a10d12fe-8f25-47bf-a8dd-0ef34960c3f3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0ede97c4-3d4d-4700-b2c9-ba332a10ec59\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0ede97c4-3d4d-4700-b2c9-ba332a10ec59')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0ede97c4-3d4d-4700-b2c9-ba332a10ec59 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 329
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "gE2PG2K3pqgH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## TRANING THE MODE"
      ],
      "metadata": {
        "id": "bW0vX03raIAT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.tree import DecisionTreeClassifier"
      ],
      "metadata": {
        "id": "6dU2b4TnI4uD"
      },
      "execution_count": 275,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = df[df[\"Flavor Profile\"] != -1]"
      ],
      "metadata": {
        "id": "mEDOECNqLDwt"
      },
      "execution_count": 277,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "label_encoder = LabelEncoder()"
      ],
      "metadata": {
        "id": "fzMPhHftS8wK"
      },
      "execution_count": 278,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for x in ['All Ingredients', 'Course', 'Diet', 'Flavor Profile', 'Ingredients', 'Name', 'Pivot Field Names', 'Region',\"State\"]:\n",
        "  df[x] = label_encoder.fit_transform(df[x])\n",
        "  mapped_values = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))\n",
        "  print(mapped_values)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lWTLsiH3R-Le",
        "outputId": "cb88f375-756a-4ee9-b2dd-935fdd368fe9"
      },
      "execution_count": 279,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'  jaggery': 0, ' Dharwadi buffalo milk': 1, ' Sugar': 2, ' all purpose flour': 3, ' almond': 4, ' almonds': 5, ' aloo': 6, ' alum powder': 7, ' amchur powder': 8, ' arhar dal': 9, ' arrowroot powder': 10, ' atta': 11, ' avocado oil': 12, ' axone': 13, ' baby potatoes': 14, ' badam': 15, ' baking powder': 16, ' baking soda': 17, ' banana': 18, ' basmati rice': 19, ' bay leaf': 20, ' beans': 21, ' beetroot': 22, ' bell pepper': 23, ' bell peppers': 24, ' bengal gram flour': 25, ' besan': 26, ' bhatura': 27, ' bhuna chana': 28, ' biryani masala powder': 29, ' bitter gourd': 30, ' black pepper': 31, ' black salt': 32, ' black sesame seeds': 33, ' blend rice': 34, ' boiled potatoes': 35, ' bombay rava': 36, ' boondi': 37, ' bread crumbs': 38, ' brinjal': 39, ' butter': 40, ' cabbage': 41, ' capsicum': 42, ' cardamom': 43, ' cardamom pods': 44, ' cardamom powder': 45, ' carrot': 46, ' cashew nuts': 47, ' cashews': 48, ' cashews and raisins': 49, ' chana daal': 50, ' chana dal': 51, ' chenna cheese': 52, ' chia seed': 53, ' chicken': 54, ' chicken chunks': 55, ' chickpea flour': 56, ' chickpeas': 57, ' chili powder': 58, ' chilli': 59, ' chillies': 60, ' chopped tomatoes': 61, ' cilantro': 62, ' cinnamon': 63, ' cinnamon stick': 64, ' clarified butter': 65, ' coconut': 66, ' coconut flakes': 67, ' coconut ice': 68, ' coconut oil': 69, ' condensed milk': 70, ' cooked rice': 71, ' coriander': 72, ' corn flour': 73, ' cottage cheese': 74, ' cream': 75, ' cucumber': 76, ' curd': 77, ' curry leaves': 78, ' dahi': 79, ' dal': 80, ' dates': 81, ' desiccated coconut': 82, ' dinner rolls': 83, ' dough': 84, ' dried fruits': 85, ' dried mango': 86, ' dried rose petals': 87, ' drumstick': 88, ' drumsticks': 89, ' dry chilli': 90, ' dry coconut': 91, ' dry dates': 92, ' dry fruits': 93, ' dry roasted': 94, ' edible gum': 95, ' egg yolks': 96, ' eggplant': 97, ' eggs': 98, ' elachi': 99, ' elephant foot yam': 100, ' falooda sev': 101, ' fennel': 102, ' fennel seeds': 103, ' fenugreek leaves': 104, ' fenugreek seeds': 105, ' filling': 106, ' fish': 107, ' fish fillets': 108, ' flour': 109, ' french beans': 110, ' fresh coconut': 111, ' fresh green chilli': 112, ' fresh green peas': 113, ' fried milk power': 114, ' frozen green peas': 115, ' fry': 116, ' garam masala': 117, ' garam masala powder': 118, ' garlic': 119, ' garlic powder': 120, ' ghee': 121, ' ginger': 122, ' ginger and garlic': 123, ' ginger powder': 124, ' gobi': 125, ' gooseberry': 126, ' gram flour': 127, ' grated coconut': 128, ' gravy': 129, ' greek yogurt': 130, ' green': 131, ' green bell pepper': 132, ' green cardamom': 133, ' green chili': 134, ' green chilies': 135, ' green chilli': 136, ' green chillies': 137, ' green peas': 138, ' gur': 139, ' heavy cream': 140, ' honey': 141, ' hot water': 142, ' idli rice': 143, ' imli': 144, ' jaggery': 145, ' jaggery syrup': 146, ' jowar flour': 147, ' kala jeera': 148, ' kasuri methi': 149, ' kewra': 150, ' khus khus': 151, ' khus-khus seeds': 152, ' kitchen lime': 153, ' kokum': 154, ' lemon': 155, ' lemon juice': 156, ' lentil flour': 157, ' litre milk': 158, ' lobster': 159, ' long beans': 160, ' low fat': 161, ' maida flour': 162, ' makki atta': 163, ' malai': 164, ' malvani masala': 165, ' mango': 166, ' marinade': 167, ' masala': 168, ' mashed potato': 169, ' masoor dal': 170, ' mawa': 171, ' methi leaves': 172, ' milk': 173, ' mint': 174, ' mixed nuts': 175, ' mixed vegetables': 176, ' molu leaf': 177, ' mung bean': 178, ' musk melon seeds': 179, ' mustard': 180, ' mustard green': 181, ' mustard oil': 182, ' mustard seed': 183, ' mustard seeds': 184, ' mutton': 185, ' nestle cream': 186, ' nigella seeds': 187, ' nuts': 188, ' oil': 189, ' olive oil': 190, ' onions': 191, ' orange rind': 192, ' palak': 193, ' panch phoran masala': 194, ' parboiled rice': 195, ' peanut': 196, ' peanut oil': 197, ' pearl millet flour': 198, ' peas': 199, ' pistachio': 200, ' plain flour': 201, ' pomegranate': 202, ' poppy seeds': 203, ' pork': 204, ' potato': 205, ' potatoes': 206, ' potol': 207, ' powdered sugar': 208, ' prawns': 209, ' pumpkin flowers': 210, ' raisins': 211, ' rapeseed oil': 212, ' rava': 213, ' raw rice': 214, ' red chili': 215, ' red chilli': 216, ' red chillies': 217, ' red food coloring': 218, ' red onion': 219, ' reduced milk': 220, ' refined flour': 221, ' rice': 222, ' rice flour': 223, ' ridge gourd': 224, ' roasted gram flour': 225, ' rock salt': 226, ' rose water': 227, ' sabudana': 228, ' saffron': 229, ' salt': 230, ' sambar powder': 231, ' sauce': 232, ' semolina': 233, ' sesame': 234, ' sesame oil': 235, ' sesame seeds': 236, ' sev': 237, ' shimla mirch': 238, ' skimmed milk powder': 239, ' skinless chicken breasts': 240, ' sliced almonds': 241, ' slivered almonds': 242, ' soaked rice': 243, ' sooji': 244, ' sorghum flour': 245, ' soy sauce': 246, ' spices': 247, ' spinach': 248, ' split urad dal': 249, ' star anise': 250, ' steamer': 251, ' sugar': 252, ' sugar syrup': 253, ' sunflower oil': 254, ' surti papdi': 255, ' sweet': 256, ' sweetened milk': 257, ' tamarind': 258, ' tamarind paste': 259, ' tandoori masala': 260, ' tea bags': 261, ' thick poha': 262, ' tindora': 263, ' tomato': 264, ' tomato paste': 265, ' tomato sauce': 266, ' tomatoes': 267, ' toor dal': 268, ' turmeric': 269, ' urad dal': 270, ' valor papdi': 271, ' vegetable oil': 272, ' vinegar': 273, ' water': 274, ' watercress': 275, ' wheat flour': 276, ' whipping cream': 277, ' white bread slices': 278, ' white flour': 279, ' white sesame seeds': 280, ' white urad dal': 281, ' whole egg': 282, ' whole red': 283, ' whole red beans': 284, ' whole urad dal': 285, ' whole wheat bread': 286, ' whole wheat flour': 287, ' wild mushrooms': 288, ' wine vinegar': 289, ' yellow moong daal': 290, ' yellow mustard': 291, ' yoghurt': 292, ' yogurt': 293, 'Aloo': 294, 'Amaranth leaves': 295, 'Apricots': 296, 'Arbi ke patte': 297, 'Arhar dal': 298, 'Baby corn': 299, 'Baby potatoes': 300, 'Baingan': 301, 'Baking soda': 302, 'Banana flower': 303, 'Basmati rice': 304, 'Beaten rice flakes': 305, 'Beef': 306, 'Besan': 307, 'Besan flour': 308, 'Biryani masala': 309, 'Bitter gourd': 310, 'Black lentils': 311, 'Boiled pork': 312, 'Bombay duck': 313, 'Bottle gourd': 314, 'Brinjal': 315, 'Brown rice': 316, 'Brown rice flour': 317, 'Canned coconut milk': 318, 'Carrot': 319, 'Carrots': 320, 'Cashews': 321, 'Cauliflower': 322, 'Chana dal': 323, 'Chenna': 324, 'Chhena': 325, 'Chicken': 326, 'Chicken thighs': 327, 'Chickpea flour': 328, 'Chickpeas': 329, 'Chole': 330, 'Cinnamon': 331, 'Citric acid': 332, 'Coconut': 333, 'Coconut milk': 334, 'Coconut oil': 335, 'Condensed milk': 336, 'Corn flour': 337, 'Cottage cheese': 338, 'Cucumber': 339, 'Curd': 340, 'Dry fruits': 341, 'Fennel': 342, 'Fermented bamboo shoot': 343, 'Firm white pumpkin': 344, 'Fish': 345, 'Fish fillet': 346, 'Fish roe': 347, 'Flour': 348, 'Forbidden black rice': 349, 'Garam masala powder': 350, 'Glutinous rice': 351, 'Gobi': 352, 'Gram flour': 353, 'Greek yogurt': 354, 'Green beans': 355, 'Green chili paste': 356, 'Green chilies': 357, 'Green garlic chutney': 358, 'Green moong beans': 359, 'Greens': 360, 'Jaggery': 361, 'Jowar flour': 362, 'Kala chana': 363, 'Kala masala': 364, 'Khaman': 365, 'Khoa': 366, 'Ladies finger': 367, 'Lamb': 368, 'Lentils': 369, 'Loaf bread': 370, 'Maida': 371, 'Maida flour': 372, 'Mango': 373, 'Meat curry powder': 374, 'Milk': 375, 'Milk powder': 376, 'Moong beans': 377, 'Moong dal': 378, 'Mushroom': 379, 'Naan bread': 380, 'Palak': 381, 'Paneer': 382, 'Pav': 383, 'Pav bhaji masala': 384, 'Peanuts': 385, 'Pearl onions': 386, 'Pigeon peas': 387, 'Potato': 388, 'Potatoes': 389, 'Rava': 390, 'Raw banana': 391, 'Raw papaya': 392, 'Raw peanuts': 393, 'Raw rice': 394, 'Red kidney beans': 395, 'Red pepper': 396, 'Refined flour': 397, 'Rice': 398, 'Rice flakes': 399, 'Rice flour': 400, 'Ridge gourd': 401, 'Rose syrup': 402, 'Rose water': 403, 'Sattu': 404, 'Semolina': 405, 'Sesame oil': 406, 'Sev': 407, 'Sevai': 408, 'Split pigeon peas': 409, 'Split urad dal': 410, 'Sticky rice': 411, 'Sugar': 412, 'Sugar syrup': 413, 'Sweet potato': 414, 'Tea leaves': 415, 'Thin rice flakes': 416, 'Tomato': 417, 'Urad dal': 418, 'Vermicelli pudding': 419, 'Wheat flour': 420, 'Whole wheat flour': 421, 'Whole wheat rava': 422, 'Yoghurt': 423, 'Yogurt': 424}\n",
            "{'dessert': 0, 'main course': 1, 'snack': 2, 'starter': 3}\n",
            "{'non vegetarian': 0, 'vegetarian': 1}\n",
            "{'-1': 0, 'bitter': 1, 'sour': 2, 'spicy': 3, 'sweet': 4}\n",
            "{'Amaranth leaves': 0, 'Apricots': 1, 'Arbi ke patte': 2, 'Arhar dal': 3, 'Baby corn': 4, 'Baby potatoes': 5, 'Baingan': 6, 'Baking soda': 7, 'Banana flower': 8, 'Basmati rice': 9, 'Beef': 10, 'Besan': 11, 'Besan flour': 12, 'Biryani masala': 13, 'Black lentils': 14, 'Boiled pork': 15, 'Bombay duck': 16, 'Bottle gourd': 17, 'Brinjal': 18, 'Brown rice': 19, 'Brown rice flour': 20, 'Carrots': 21, 'Cashews': 22, 'Cauliflower': 23, 'Chana dal': 24, 'Chenna': 25, 'Chicken': 26, 'Chickpea flour': 27, 'Cinnamon': 28, 'Coconut': 29, 'Coconut Milk': 30, 'Coconut oil': 31, 'Condensed Milk': 32, 'Corn flour': 33, 'Cottage cheese': 34, 'Cucumber': 35, 'Curd': 36, 'Dry fruits': 37, 'Fennel': 38, 'Fermented bamboo shoot': 39, 'Gram flour': 40, 'Green moong beans': 41, 'Jaggery': 42, 'Jowar flour': 43, 'Loaf bread': 44, 'Maida': 45, 'Mango': 46, 'Milk': 47, 'Potato': 48, 'Rice': 49, 'Rice flakes': 50, 'Rice flour': 51, 'Semolina': 52, 'Tomato': 53, 'Wheat flour': 54, 'all purpose flour': 55, 'almonds': 56, 'alum powder': 57, 'amchur powder': 58, 'avocado oil': 59, 'axone': 60, 'badam': 61, 'baking powder': 62, 'banana': 63, 'bay leaf': 64, 'beans': 65, 'beetroot': 66, 'bell peppers': 67, 'bengal gram flour': 68, 'bhuna chana': 69, 'black pepper': 70, 'black salt': 71, 'blend rice': 72, 'boondi': 73, 'bread crumbs': 74, 'butter': 75, 'cabbage': 76, 'capsicum': 77, 'cardamom': 78, 'chenna cheese': 79, 'chia seed': 80, 'chili powder': 81, 'chillies': 82, 'clarified butter': 83, 'curry leaves': 84, 'dinner rolls': 85, 'dough': 86, 'dried fruits': 87, 'drumsticks': 88, 'edible gum': 89, 'elachi': 90, 'elephant foot yam': 91, 'falooda sev': 92, 'fenugreek leaves': 93, 'fenugreek seeds': 94, 'fish': 95, 'garam masala': 96, 'garlic': 97, 'ghee': 98, 'ginger': 99, 'green peas': 100, 'hot water': 101, 'jaggery': 102, 'lentil flour': 103, 'nuts': 104, 'pearl millet flour': 105, 'plain flour': 106, 'sesame seeds': 107, 'sugar': 108}\n",
            "{'Adhirasam': 0, 'Aloo gobi': 1, 'Aloo matar': 2, 'Aloo methi': 3, 'Aloo shimla mirch': 4, 'Aloo tikki': 5, 'Alu Pitika': 6, 'Amti': 7, 'Anarsa': 8, 'Ariselu': 9, 'Attu': 10, 'Avial': 11, 'Bajri no rotlo': 12, 'Balu shahi': 13, 'Bandar laddu': 14, 'Basundi': 15, 'Bebinca': 16, 'Beef Fry': 17, 'Bengena Pitika': 18, 'Bhakri': 19, 'Bhatura': 20, 'Bhindi masala': 21, 'Bilahi Maas': 22, 'Biryani': 23, 'Bisi bele bath': 24, 'Black rice': 25, 'Bombil fry': 26, 'Boondi': 27, 'Bora Sawul': 28, 'Brown Rice': 29, 'Butter chicken': 30, 'Chak Hao Kheer': 31, 'Chakali': 32, 'Cham cham': 33, 'Chana masala': 34, 'Chapati': 35, 'Cheera Doi': 36, 'Chevdo': 37, 'Chhena jalebi': 38, 'Chhena kheeri': 39, 'Chhena poda': 40, 'Chicken Tikka': 41, 'Chicken Tikka masala': 42, 'Chicken Varuval': 43, 'Chicken razala': 44, 'Chikki': 45, 'Chingri Bhape': 46, 'Chingri malai curry': 47, 'Chole bhature': 48, 'Chorafali': 49, 'Churma Ladoo': 50, 'Coconut vadi': 51, 'Copra paak': 52, 'Currivepillai sadam': 53, 'Daal Dhokli': 54, 'Daal baati churma': 55, 'Daal puri': 56, 'Dahi vada': 57, 'Dal makhani': 58, 'Dal tadka': 59, 'Dalithoy': 60, 'Dharwad pedha': 61, 'Dhokla': 62, 'Dhondas': 63, 'Doodhpak': 64, 'Dosa': 65, 'Double ka meetha': 66, 'Dudhi halwa': 67, 'Dum aloo': 68, 'Fara': 69, 'Farsi Puri': 70, 'Gajar ka halwa': 71, 'Galho': 72, 'Gatta curry': 73, 'Gavvalu': 74, 'Gheela Pitha': 75, 'Ghevar': 76, 'Ghooghra': 77, 'Goja': 78, 'Gud papdi': 79, 'Gulab jamun': 80, 'Halvasan': 81, 'Hando Guri': 82, 'Handwo': 83, 'Haq Maas': 84, 'Idiappam': 85, 'Idli': 86, 'Imarti': 87, 'Jalebi': 88, 'Jeera Aloo': 89, 'Kaara kozhambu': 90, 'Kabiraji': 91, 'Kachori': 92, 'Kadai paneer': 93, 'Kadhi pakoda': 94, 'Kajjikaya': 95, 'Kaju katli': 96, 'Kakinada khaja': 97, 'Kalakand': 98, 'Kanji': 99, 'Kansar': 100, 'Karela bharta': 101, 'Keerai kootu': 102, 'Keerai masiyal': 103, 'Keerai poriyal': 104, 'Keerai sadam': 105, 'Keri no ras': 106, 'Khakhra': 107, 'Khaman': 108, 'Khandvi': 109, 'Khar': 110, 'Kheer': 111, 'Kheer sagar': 112, 'Khichdi': 113, 'Khichu': 114, 'Khorisa': 115, 'Kofta': 116, 'Koldil Chicken': 117, 'Koldil Duck': 118, 'Kolim Jawla': 119, 'Kombdi vade': 120, 'Konir Dom': 121, 'Kootu': 122, 'Kos kootu': 123, 'Koshambri': 124, 'Koshimbir': 125, 'Kothamali sadam': 126, 'Kulfi falooda': 127, 'Kumol Sawul': 128, 'Kutchi dabeli': 129, 'Kuzhakkattai': 130, 'Kuzhambu': 131, 'Kuzhi paniyaram': 132, 'Laapsi': 133, 'Laddu': 134, 'Lassi': 135, 'Lauki ke kofte': 136, 'Lauki ki subji': 137, 'Ledikeni': 138, 'Lilva Kachori': 139, 'Litti chokha': 140, 'Luchi': 141, 'Lyangcha': 142, 'Maach Jhol': 143, 'Mag Dhokli': 144, 'Mahim halwa': 145, 'Makki di roti sarson da saag': 146, 'Malapua': 147, 'Masala Dosa': 148, 'Masor Koni': 149, 'Masor tenga': 150, 'Mawa Bati': 151, 'Methi na Gota': 152, 'Mihidana': 153, 'Mishti Chholar Dal': 154, 'Misi roti': 155, 'Misti doi': 156, 'Modak': 157, 'Mohanthal': 158, 'Mushroom do pyaza': 159, 'Mushroom matar': 160, 'Muthiya': 161, 'Mysore pak': 162, 'Naan': 163, 'Namakpara': 164, 'Nankhatai': 165, 'Navrattan korma': 166, 'Obbattu holige': 167, 'Pachadi': 168, 'Pakhala': 169, 'Palak paneer': 170, 'Palathalikalu': 171, 'Paneer butter masala': 172, 'Paneer tikka masala': 173, 'Pani Pitha': 174, 'Pani puri': 175, 'Paniyaram': 176, 'Panjeeri': 177, 'Pantua': 178, 'Papad': 179, 'Papadum': 180, 'Paratha': 181, 'Paravannam': 182, 'Paruppu sadam': 183, 'Patra': 184, 'Pattor': 185, 'Pav Bhaji': 186, 'Payasam': 187, 'Payokh': 188, 'Pesarattu': 189, 'Petha': 190, 'Phirni': 191, 'Pinaca': 192, 'Pindi chana': 193, 'Pithe': 194, 'Poha': 195, 'Pongal': 196, 'Poornalu': 197, 'Pootharekulu': 198, 'Poriyal': 199, 'Pork Bharta': 200, 'Prawn malai curry': 201, 'Puli sadam': 202, 'Puri Bhaji': 203, 'Puttu': 204, 'Qubani ka meetha': 205, 'Rabri': 206, 'Rajma chaval': 207, 'Ras malai': 208, 'Rasabali': 209, 'Rasam': 210, 'Rasgulla': 211, 'Red Rice': 212, 'Rongi': 213, 'Saath': 214, 'Sabudana Khichadi': 215, 'Sambar': 216, 'Samosa': 217, 'Sandesh': 218, 'Sandige': 219, 'Sattu ki roti': 220, 'Sev khamani': 221, 'Sev tameta': 222, 'Sevai': 223, 'Shahi paneer': 224, 'Shahi tukra': 225, 'Shankarpali': 226, 'Sheer korma': 227, 'Sheera': 228, 'Shrikhand': 229, 'Shufta': 230, 'Shukto': 231, 'Singori': 232, 'Sohan halwa': 233, 'Sohan papdi': 234, 'Sukhdi': 235, 'Surnoli': 236, 'Sutar feni': 237, 'Tandoori Chicken': 238, 'Tandoori Fish Tikka': 239, 'Thalipeeth': 240, 'Thayir sadam': 241, 'Theeyal': 242, 'Thepla': 243, 'Til Pitha': 244, 'Turiya Patra Vatana sabji': 245, 'Undhiyu': 246, 'Unni Appam': 247, 'Upma': 248, 'Uttapam': 249, 'Vada': 250, 'Veg Kolhapuri': 251, 'Vegetable jalfrezi': 252, 'Vindaloo': 253, 'Zunka': 254}\n",
            "{'Ingredients - Split 1': 0, 'Ingredients - Split 2': 1, 'Ingredients - Split 3': 2, 'Ingredients - Split 4': 3, 'Ingredients - Split 5': 4, 'Ingredients - Split 6': 5, 'Ingredients - Split 7': 6}\n",
            "{'Central': 0, 'East': 1, 'North': 2, 'North East': 3, 'South': 4, 'West': 5}\n",
            "{'Andhra Pradesh': 0, 'Assam': 1, 'Bihar': 2, 'Chhattisgarh': 3, 'Goa': 4, 'Gujarat': 5, 'Haryana': 6, 'Jammu & Kashmir': 7, 'Karnataka': 8, 'Kerala': 9, 'Madhya Pradesh': 10, 'Maharashtra': 11, 'Manipur': 12, 'NCT of Delhi': 13, 'Nagaland': 14, 'Odisha': 15, 'Punjab': 16, 'Rajasthan': 17, 'Tamil Nadu': 18, 'Telangana': 19, 'Tripura': 20, 'Uttar Pradesh': 21, 'Uttarakhand': 22, 'West Bengal': 23}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "YIuQH3WySxnM",
        "outputId": "199321eb-4aa5-4213-d7e8-46f5c320d347"
      },
      "execution_count": 280,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      All Ingredients  Course  Diet  Flavor Profile  Ingredients  Name  \\\n",
              "0                 358       2     1               3          100   139   \n",
              "1                 113       2     1               3          100   139   \n",
              "2                 122       2     1               3          100   139   \n",
              "3                 156       2     1               3          100   139   \n",
              "4                 201       2     1               3          100   139   \n",
              "...               ...     ...   ...             ...          ...   ...   \n",
              "1131              338       0     1               4           61   230   \n",
              "1132               92       0     1               4           61   230   \n",
              "1133               87       0     1               4           61   230   \n",
              "1134              200       0     1               4           61   230   \n",
              "1135               15       0     1               4           61   230   \n",
              "\n",
              "      Pivot Field Names  Region  State  Cook Time  Prep Time  \n",
              "0                     1       5      5          6         30  \n",
              "1                     1       5      5          6         30  \n",
              "2                     1       5      5          6         30  \n",
              "3                     1       5      5          6         30  \n",
              "4                     1       5      5          6         30  \n",
              "...                 ...     ...    ...        ...        ...  \n",
              "1131                  4       2      7         30         15  \n",
              "1132                  4       2      7         30         15  \n",
              "1133                  4       2      7         30         15  \n",
              "1134                  4       2      7         30         15  \n",
              "1135                  4       2      7         30         15  \n",
              "\n",
              "[1136 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b8b9142b-7a6e-460f-ab1b-eca33f6c8858\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>All Ingredients</th>\n",
              "      <th>Course</th>\n",
              "      <th>Diet</th>\n",
              "      <th>Flavor Profile</th>\n",
              "      <th>Ingredients</th>\n",
              "      <th>Name</th>\n",
              "      <th>Pivot Field Names</th>\n",
              "      <th>Region</th>\n",
              "      <th>State</th>\n",
              "      <th>Cook Time</th>\n",
              "      <th>Prep Time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>358</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>100</td>\n",
              "      <td>139</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>113</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>100</td>\n",
              "      <td>139</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>122</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>100</td>\n",
              "      <td>139</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>156</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>100</td>\n",
              "      <td>139</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>201</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>100</td>\n",
              "      <td>139</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1131</th>\n",
              "      <td>338</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>61</td>\n",
              "      <td>230</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1132</th>\n",
              "      <td>92</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>61</td>\n",
              "      <td>230</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1133</th>\n",
              "      <td>87</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>61</td>\n",
              "      <td>230</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1134</th>\n",
              "      <td>200</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>61</td>\n",
              "      <td>230</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1135</th>\n",
              "      <td>15</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>61</td>\n",
              "      <td>230</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1136 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b8b9142b-7a6e-460f-ab1b-eca33f6c8858')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b8b9142b-7a6e-460f-ab1b-eca33f6c8858 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b8b9142b-7a6e-460f-ab1b-eca33f6c8858');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d8d5a5af-fcbe-40d7-a0ac-fced07afe9b2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d8d5a5af-fcbe-40d7-a0ac-fced07afe9b2')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d8d5a5af-fcbe-40d7-a0ac-fced07afe9b2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 280
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop(\"Region\", axis = 1)\n",
        "y = df[\"Region\"]"
      ],
      "metadata": {
        "id": "IK3U-E-BTpbr"
      },
      "execution_count": 281,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n"
      ],
      "metadata": {
        "id": "zstOZ5K_UpkX"
      },
      "execution_count": 282,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf = DecisionTreeClassifier(random_state=42)"
      ],
      "metadata": {
        "id": "cFd4iQUJUyik"
      },
      "execution_count": 283,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "clf.fit(X_train, y_train)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "90tv6u11VQPZ",
        "outputId": "28564c61-6bac-4e78-d202-ce423b41335a"
      },
      "execution_count": 284,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=42)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 284
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = clf.predict(X_test)"
      ],
      "metadata": {
        "id": "DtwmJajMVRuv"
      },
      "execution_count": 285,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "\n",
        "print(f\"Accuracy Score: {accuracy:.2f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_6n-PTmjXUDb",
        "outputId": "1175d9a2-a9dd-4ce7-e415-ed8e9746761f"
      },
      "execution_count": 286,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy Score: 1.00\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "conf_matrix = confusion_matrix(y_test, y_pred)\n",
        "\n",
        "# Create a heatmap of the confusion matrix\n",
        "plt.figure(figsize=(10, 8))\n",
        "plt.imshow(conf_matrix, cmap='Blues', interpolation='nearest')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.colorbar()\n",
        "tick_marks = np.arange(6)\n",
        "plt.xticks(tick_marks, ['Central', 'East', 'North', 'North East', 'South', 'West'])\n",
        "plt.yticks(tick_marks, ['Central', 'East', 'North', 'North East', 'South', 'West'])\n",
        "\n",
        "for i in range(6):\n",
        "    for j in range(6):\n",
        "        plt.text(j, i, str(conf_matrix[i, j]), ha='center', va='center', color='white' if conf_matrix[i, j] > conf_matrix.max() / 2 else 'black')\n",
        "\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('True')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "QpMiWETFe5qv",
        "outputId": "fb8b713d-182b-4ee6-ab3a-11d90896d936"
      },
      "execution_count": 317,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"/content/test.csv\")"
      ],
      "metadata": {
        "id": "hcVubo9jf8De"
      },
      "execution_count": 325,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "6WRAW9ymokGJ",
        "outputId": "a528aab5-643d-44fd-c9a3-acaaee944d34"
      },
      "execution_count": 326,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Unnamed: 0       All Ingredients   Course        Diet Flavor Profile  \\\n",
              "0              0  Green garlic chutney    snack  vegetarian          spicy   \n",
              "1              0      fresh green peas    snack  vegetarian          spicy   \n",
              "2              0                ginger    snack  vegetarian          spicy   \n",
              "3              0           lemon juice    snack  vegetarian          spicy   \n",
              "4              0           plain flour    snack  vegetarian          spicy   \n",
              "...          ...                   ...      ...         ...            ...   \n",
              "1131         254        Cottage cheese  dessert  vegetarian          sweet   \n",
              "1132         254             dry dates  dessert  vegetarian          sweet   \n",
              "1133         254     dried rose petals  dessert  vegetarian          sweet   \n",
              "1134         254             pistachio  dessert  vegetarian          sweet   \n",
              "1135         254                 badam  dessert  vegetarian          sweet   \n",
              "\n",
              "     Ingredients           Name      Pivot Field Names Region  \\\n",
              "0     green peas  Lilva Kachori  Ingredients - Split 2   West   \n",
              "1     green peas  Lilva Kachori  Ingredients - Split 2   West   \n",
              "2     green peas  Lilva Kachori  Ingredients - Split 2   West   \n",
              "3     green peas  Lilva Kachori  Ingredients - Split 2   West   \n",
              "4     green peas  Lilva Kachori  Ingredients - Split 2   West   \n",
              "...          ...            ...                    ...    ...   \n",
              "1131       badam         Shufta  Ingredients - Split 5  North   \n",
              "1132       badam         Shufta  Ingredients - Split 5  North   \n",
              "1133       badam         Shufta  Ingredients - Split 5  North   \n",
              "1134       badam         Shufta  Ingredients - Split 5  North   \n",
              "1135       badam         Shufta  Ingredients - Split 5  North   \n",
              "\n",
              "                State  Cook Time  Prep Time  \n",
              "0             Gujarat          6         30  \n",
              "1             Gujarat          6         30  \n",
              "2             Gujarat          6         30  \n",
              "3             Gujarat          6         30  \n",
              "4             Gujarat          6         30  \n",
              "...               ...        ...        ...  \n",
              "1131  Jammu & Kashmir         30         15  \n",
              "1132  Jammu & Kashmir         30         15  \n",
              "1133  Jammu & Kashmir         30         15  \n",
              "1134  Jammu & Kashmir         30         15  \n",
              "1135  Jammu & Kashmir         30         15  \n",
              "\n",
              "[1136 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-99883987-5246-4b93-b917-f22267510e4e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>All Ingredients</th>\n",
              "      <th>Course</th>\n",
              "      <th>Diet</th>\n",
              "      <th>Flavor Profile</th>\n",
              "      <th>Ingredients</th>\n",
              "      <th>Name</th>\n",
              "      <th>Pivot Field Names</th>\n",
              "      <th>Region</th>\n",
              "      <th>State</th>\n",
              "      <th>Cook Time</th>\n",
              "      <th>Prep Time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>Green garlic chutney</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>fresh green peas</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>ginger</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>lemon juice</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>plain flour</td>\n",
              "      <td>snack</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>spicy</td>\n",
              "      <td>green peas</td>\n",
              "      <td>Lilva Kachori</td>\n",
              "      <td>Ingredients - Split 2</td>\n",
              "      <td>West</td>\n",
              "      <td>Gujarat</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1131</th>\n",
              "      <td>254</td>\n",
              "      <td>Cottage cheese</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1132</th>\n",
              "      <td>254</td>\n",
              "      <td>dry dates</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1133</th>\n",
              "      <td>254</td>\n",
              "      <td>dried rose petals</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1134</th>\n",
              "      <td>254</td>\n",
              "      <td>pistachio</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1135</th>\n",
              "      <td>254</td>\n",
              "      <td>badam</td>\n",
              "      <td>dessert</td>\n",
              "      <td>vegetarian</td>\n",
              "      <td>sweet</td>\n",
              "      <td>badam</td>\n",
              "      <td>Shufta</td>\n",
              "      <td>Ingredients - Split 5</td>\n",
              "      <td>North</td>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>30</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1136 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99883987-5246-4b93-b917-f22267510e4e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-99883987-5246-4b93-b917-f22267510e4e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-99883987-5246-4b93-b917-f22267510e4e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-84ccd476-624f-4386-b1f7-b03916fb9130\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-84ccd476-624f-4386-b1f7-b03916fb9130')\"\n",
              "            title=\"Suggest charts.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-84ccd476-624f-4386-b1f7-b03916fb9130 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 326
        }
      ]
    }
  ]
}